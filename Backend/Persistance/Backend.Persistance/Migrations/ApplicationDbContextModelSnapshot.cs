// <auto-generated />
using System;
using Backend.Domain.Enum;
using Backend.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Backend.Persistance.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Backend.Domain.Entities.Auditing.AuditRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("EntityType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Table")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryKey");

                    b.HasIndex("UserId");

                    b.ToTable("Audits");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Chat.ChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ContainsMedia")
                        .HasColumnType("bit");

                    b.Property<string>("DownloadUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FileSizeInBytes")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("S3Filename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SeenAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SentAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Exercises.ExerciseType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequiresBodyweight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("RequiresReps")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("RequiresSets")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("RequiresTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("RequiresWeight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("ExerciseTypes");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Exercises.ExerciseTypeTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExerciseTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Show")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseTypeId");

                    b.HasIndex("TagId");

                    b.ToTable("ExerciseTypeTags");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Exercises.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("TagGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TagGroupId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Exercises.TagGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HexBackground")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("#fef6f9");

                    b.Property<string>("HexColor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("#616161");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("TagGroups");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Media.MediaFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUploaded")
                        .HasColumnType("datetime2");

                    b.Property<string>("DownloadUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ExerciseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Filename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FtpFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TrainingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("TrainingId");

                    b.ToTable("MediaFiles");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Notification.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("JsonEntity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Payload")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Read")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RedirectUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderAvatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SentAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Subtype")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SystemNotification")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Backend.Domain.Entities.ProgressTracking.Bodyweight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Bodyweights");
                });

            modelBuilder.Entity("Backend.Domain.Entities.ProgressTracking.PersonalBest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Bodyweight")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateAchieved")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExerciseTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("IpfPoints")
                        .HasColumnType("float");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.Property<double>("WilksScore")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseTypeId");

                    b.ToTable("PBs");
                });

            modelBuilder.Entity("Backend.Domain.Entities.System.SystemLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("InnerException")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SystemLog");
                });

            modelBuilder.Entity("Backend.Domain.Entities.TrainingLog.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExerciseTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("TrainingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseTypeId");

                    b.HasIndex("TrainingId");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("Backend.Domain.Entities.TrainingLog.Set", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AverageVelocity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Intensity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ProjectedMax")
                        .HasColumnType("float");

                    b.Property<double>("Reps")
                        .HasColumnType("float");

                    b.Property<double>("Rir")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(2.0);

                    b.Property<double>("Rpe")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(8.0);

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.Property<double>("Volume")
                        .HasColumnType("float");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.ToTable("Sets");
                });

            modelBuilder.Entity("Backend.Domain.Entities.TrainingLog.Training", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTrained")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NoteRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Trainings");
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Male");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrialDuration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(15);

                    b.Property<Guid>("UserSettingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserSettingId")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("AccountType").HasValue("User");
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.Dashboard.Dashboard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserSettingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Dashboards");
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.Dashboard.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DashboardId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.Dashboard.TrackItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Component")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JsonParams")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TrackId");

                    b.ToTable("TrackItems");
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.NotificationSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ReceiveMail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("ReceiveNotification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid>("UserSettingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserSettingId");

                    b.ToTable("NotificationSetting");

                    b.HasData(
                        new
                        {
                            Id = new Guid("71691ddc-039f-4606-b614-ff4a19516c00"),
                            NotificationType = "TrainingCreated",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("0d528a91-fbbe-4a02-924a-792344bbbd65")
                        },
                        new
                        {
                            Id = new Guid("71691ddc-039f-4606-b614-ff4a19516c01"),
                            NotificationType = "NoteAdded",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("0d528a91-fbbe-4a02-924a-792344bbbd65")
                        },
                        new
                        {
                            Id = new Guid("71691ddc-039f-4606-b614-ff4a19516c02"),
                            NotificationType = "MediaAdded",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("0d528a91-fbbe-4a02-924a-792344bbbd65")
                        },
                        new
                        {
                            Id = new Guid("71691ddc-039f-4606-b614-ff4a19516c03"),
                            NotificationType = "ImportFinished",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("0d528a91-fbbe-4a02-924a-792344bbbd65")
                        },
                        new
                        {
                            Id = new Guid("71691ddc-039f-4606-b614-ff4a19516c04"),
                            NotificationType = "BodyweightAdded",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("0d528a91-fbbe-4a02-924a-792344bbbd65")
                        },
                        new
                        {
                            Id = new Guid("71691ddc-039f-4606-b614-ff4a19516c05"),
                            NotificationType = "PersonalBestAdded",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("0d528a91-fbbe-4a02-924a-792344bbbd65")
                        },
                        new
                        {
                            Id = new Guid("71691ddc-039f-4606-b614-ff4a19516c10"),
                            NotificationType = "TrainingCreated",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("8d399c00-5684-4a54-9c2c-b44a485c3583")
                        },
                        new
                        {
                            Id = new Guid("71691ddc-039f-4606-b614-ff4a19516c11"),
                            NotificationType = "NoteAdded",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("8d399c00-5684-4a54-9c2c-b44a485c3583")
                        },
                        new
                        {
                            Id = new Guid("71691ddc-039f-4606-b614-ff4a19516c12"),
                            NotificationType = "MediaAdded",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("8d399c00-5684-4a54-9c2c-b44a485c3583")
                        },
                        new
                        {
                            Id = new Guid("71691ddc-039f-4606-b614-ff4a19516c13"),
                            NotificationType = "ImportFinished",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("8d399c00-5684-4a54-9c2c-b44a485c3583")
                        },
                        new
                        {
                            Id = new Guid("71691ddc-039f-4606-b614-ff4a19516c14"),
                            NotificationType = "BodyweightAdded",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("8d399c00-5684-4a54-9c2c-b44a485c3583")
                        },
                        new
                        {
                            Id = new Guid("71691ddc-039f-4606-b614-ff4a19516c15"),
                            NotificationType = "PersonalBestAdded",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("8d399c00-5684-4a54-9c2c-b44a485c3583")
                        },
                        new
                        {
                            Id = new Guid("71691ddc-039f-4606-b614-ff4a19516c20"),
                            NotificationType = "TrainingCreated",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("051fde35-1f15-4ffe-81d0-e67e2459a6c5")
                        },
                        new
                        {
                            Id = new Guid("71691ddc-039f-4606-b614-ff4a19516c21"),
                            NotificationType = "NoteAdded",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("051fde35-1f15-4ffe-81d0-e67e2459a6c5")
                        },
                        new
                        {
                            Id = new Guid("71691ddc-039f-4606-b614-ff4a19516c22"),
                            NotificationType = "MediaAdded",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("051fde35-1f15-4ffe-81d0-e67e2459a6c5")
                        },
                        new
                        {
                            Id = new Guid("71691ddc-039f-4606-b614-ff4a19516c23"),
                            NotificationType = "ImportFinished",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("051fde35-1f15-4ffe-81d0-e67e2459a6c5")
                        },
                        new
                        {
                            Id = new Guid("71691ddc-039f-4606-b614-ff4a19516c24"),
                            NotificationType = "BodyweightAdded",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("051fde35-1f15-4ffe-81d0-e67e2459a6c5")
                        },
                        new
                        {
                            Id = new Guid("71691ddc-039f-4606-b614-ff4a19516c25"),
                            NotificationType = "PersonalBestAdded",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("051fde35-1f15-4ffe-81d0-e67e2459a6c5")
                        },
                        new
                        {
                            Id = new Guid("71691ddc-039f-4606-b614-ff4a19516c30"),
                            NotificationType = "TrainingCreated",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("46bd253c-a630-4759-a2a5-a4ec7497c88a")
                        },
                        new
                        {
                            Id = new Guid("71691ddc-039f-4606-b614-ff4a19516c31"),
                            NotificationType = "NoteAdded",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("46bd253c-a630-4759-a2a5-a4ec7497c88a")
                        },
                        new
                        {
                            Id = new Guid("71691ddc-039f-4606-b614-ff4a19516c32"),
                            NotificationType = "MediaAdded",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("46bd253c-a630-4759-a2a5-a4ec7497c88a")
                        },
                        new
                        {
                            Id = new Guid("71691ddc-039f-4606-b614-ff4a19516c33"),
                            NotificationType = "ImportFinished",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("46bd253c-a630-4759-a2a5-a4ec7497c88a")
                        },
                        new
                        {
                            Id = new Guid("71691ddc-039f-4606-b614-ff4a19516c34"),
                            NotificationType = "BodyweightAdded",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("46bd253c-a630-4759-a2a5-a4ec7497c88a")
                        },
                        new
                        {
                            Id = new Guid("71691ddc-039f-4606-b614-ff4a19516c35"),
                            NotificationType = "PersonalBestAdded",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("46bd253c-a630-4759-a2a5-a4ec7497c88a")
                        });
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.UserSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2)
                        .HasDefaultValue("en");

                    b.Property<Guid?>("MainDashboardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RpeSystem")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Rpe");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Light");

                    b.Property<string>("UnitSystem")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Metric");

                    b.Property<bool>("UsePercentages")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("UseRpeSystem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("MainDashboardId")
                        .IsUnique()
                        .HasFilter("[MainDashboardId] IS NOT NULL");

                    b.ToTable("UserSettings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0d528a91-fbbe-4a02-924a-792344bbbd65"),
                            ApplicationUserId = new Guid("0faee6ac-1772-4bbe-9990-a7d9a22dd529"),
                            RpeSystem = "Rpe",
                            Theme = "Light",
                            UnitSystem = "Imperial",
                            UsePercentages = false,
                            UseRpeSystem = false
                        },
                        new
                        {
                            Id = new Guid("8d399c00-5684-4a54-9c2c-b44a485c3583"),
                            ApplicationUserId = new Guid("8d399c00-5654-4a54-9c2c-b44a485c3583"),
                            RpeSystem = "Rpe",
                            Theme = "Light",
                            UnitSystem = "Imperial",
                            UsePercentages = false,
                            UseRpeSystem = false
                        },
                        new
                        {
                            Id = new Guid("051fde35-1f15-4ffe-81d0-e67e2459a6c5"),
                            ApplicationUserId = new Guid("fa67c815-486e-4e9d-89dd-3156376ac9b4"),
                            RpeSystem = "Rpe",
                            Theme = "Light",
                            UnitSystem = "Imperial",
                            UsePercentages = false,
                            UseRpeSystem = false
                        },
                        new
                        {
                            Id = new Guid("46bd253c-a630-4759-a2a5-a4ec7497c88a"),
                            ApplicationUserId = new Guid("939085da-e515-4422-80eb-7847e7f4eadb"),
                            RpeSystem = "Rpe",
                            Theme = "Light",
                            UnitSystem = "Imperial",
                            UsePercentages = false,
                            UseRpeSystem = false
                        });
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.Admin", b =>
                {
                    b.HasBaseType("Backend.Domain.Entities.User.ApplicationUser");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0faee6ac-1772-4bbe-9990-a7d9a22dd529"),
                            AccountType = "User",
                            Active = false,
                            CreatedOn = new DateTime(2020, 4, 15, 14, 34, 34, 499, DateTimeKind.Utc).AddTicks(2311),
                            CustomerId = "cus_FLi7gZv8w0j0GB",
                            Email = "admin@trainingcompanion.com",
                            FirstName = "Admin",
                            Gender = "Male",
                            LastModified = new DateTime(2020, 4, 15, 14, 34, 34, 499, DateTimeKind.Utc).AddTicks(3020),
                            LastName = "",
                            PasswordHash = "8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918",
                            TrialDuration = 0,
                            UserSettingId = new Guid("0d528a91-fbbe-4a02-924a-792344bbbd65"),
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.Athlete", b =>
                {
                    b.HasBaseType("Backend.Domain.Entities.User.ApplicationUser");

                    b.Property<Guid?>("CoachId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("CoachId");

                    b.HasDiscriminator().HasValue("Athlete");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d399c00-5654-4a54-9c2c-b44a485c3583"),
                            AccountType = "User",
                            Active = false,
                            CreatedOn = new DateTime(2020, 4, 15, 14, 34, 34, 499, DateTimeKind.Utc).AddTicks(6121),
                            Email = "athlete@trainingcompanion.com",
                            FirstName = "Athlete",
                            Gender = "Male",
                            LastModified = new DateTime(2020, 4, 15, 14, 34, 34, 499, DateTimeKind.Utc).AddTicks(6134),
                            LastName = "",
                            PasswordHash = "23a1f74bc589fe525387f8d2c40f1e552a564fe5de00af935bb7a0592fc976c6",
                            TrialDuration = 0,
                            UserSettingId = new Guid("8d399c00-5684-4a54-9c2c-b44a485c3583"),
                            Username = "athlete",
                            CoachId = new Guid("fa67c815-486e-4e9d-89dd-3156376ac9b4")
                        });
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.Coach", b =>
                {
                    b.HasBaseType("Backend.Domain.Entities.User.ApplicationUser");

                    b.HasDiscriminator().HasValue("Coach");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fa67c815-486e-4e9d-89dd-3156376ac9b4"),
                            AccountType = "User",
                            Active = false,
                            CreatedOn = new DateTime(2020, 4, 15, 14, 34, 34, 499, DateTimeKind.Utc).AddTicks(8601),
                            CustomerId = "cus_FHk5RepADdfm5H",
                            Email = "coach@trainingcompanion.com",
                            FirstName = "Coach",
                            Gender = "Male",
                            LastModified = new DateTime(2020, 4, 15, 14, 34, 34, 499, DateTimeKind.Utc).AddTicks(8606),
                            LastName = "",
                            PasswordHash = "e0f167bc84b881bc06f6884fb48e02f41dfc5579e25489db6c6bde238e4aed15",
                            TrialDuration = 0,
                            UserSettingId = new Guid("051fde35-1f15-4ffe-81d0-e67e2459a6c5"),
                            Username = "coach"
                        });
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.SoloAthlete", b =>
                {
                    b.HasBaseType("Backend.Domain.Entities.User.ApplicationUser");

                    b.HasDiscriminator().HasValue("SoloAthlete");

                    b.HasData(
                        new
                        {
                            Id = new Guid("939085da-e515-4422-80eb-7847e7f4eadb"),
                            AccountType = "User",
                            Active = false,
                            CreatedOn = new DateTime(2020, 4, 15, 14, 34, 34, 499, DateTimeKind.Utc).AddTicks(6874),
                            Email = "solo.athlete@trainingcompanion.com",
                            FirstName = "Solo",
                            Gender = "Male",
                            LastModified = new DateTime(2020, 4, 15, 14, 34, 34, 499, DateTimeKind.Utc).AddTicks(6878),
                            LastName = "Athlete",
                            PasswordHash = "304301ea5935cd1d38e55206e09eebcfe95fcb56f96ddf0ef2d8557a295728c8",
                            TrialDuration = 0,
                            UserSettingId = new Guid("46bd253c-a630-4759-a2a5-a4ec7497c88a"),
                            Username = "soloathlete"
                        });
                });

            modelBuilder.Entity("Backend.Domain.Entities.Chat.ChatMessage", b =>
                {
                    b.HasOne("Backend.Domain.Entities.User.ApplicationUser", "Sender")
                        .WithMany("ChatMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.Exercises.ExerciseType", b =>
                {
                    b.HasOne("Backend.Domain.Entities.User.ApplicationUser", "ApplicationUser")
                        .WithMany("ExerciseTypes")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.Exercises.ExerciseTypeTag", b =>
                {
                    b.HasOne("Backend.Domain.Entities.Exercises.ExerciseType", "ExerciseType")
                        .WithMany("Properties")
                        .HasForeignKey("ExerciseTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Entities.Exercises.Tag", "Tag")
                        .WithMany("ExerciseTypeTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.Exercises.Tag", b =>
                {
                    b.HasOne("Backend.Domain.Entities.Exercises.TagGroup", "TagGroup")
                        .WithMany("Tags")
                        .HasForeignKey("TagGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.Exercises.TagGroup", b =>
                {
                    b.HasOne("Backend.Domain.Entities.User.ApplicationUser", "ApplicationUser")
                        .WithMany("TagGroups")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.Media.MediaFile", b =>
                {
                    b.HasOne("Backend.Domain.Entities.User.ApplicationUser", "ApplicationUser")
                        .WithMany("MediaFiles")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Entities.TrainingLog.Exercise", "Exercise")
                        .WithMany("Media")
                        .HasForeignKey("ExerciseId");

                    b.HasOne("Backend.Domain.Entities.TrainingLog.Training", "Training")
                        .WithMany("Media")
                        .HasForeignKey("TrainingId");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Notification.Notification", b =>
                {
                    b.HasOne("Backend.Domain.Entities.User.ApplicationUser", "Receiver")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Backend.Domain.Entities.User.ApplicationUser", "Sender")
                        .WithMany("SentNotifications")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Backend.Domain.Entities.ProgressTracking.Bodyweight", b =>
                {
                    b.HasOne("Backend.Domain.Entities.User.ApplicationUser", "User")
                        .WithMany("Bodyweights")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.ProgressTracking.PersonalBest", b =>
                {
                    b.HasOne("Backend.Domain.Entities.Exercises.ExerciseType", "ExerciseType")
                        .WithMany("PBs")
                        .HasForeignKey("ExerciseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.TrainingLog.Exercise", b =>
                {
                    b.HasOne("Backend.Domain.Entities.Exercises.ExerciseType", "ExerciseType")
                        .WithMany("Exercises")
                        .HasForeignKey("ExerciseTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Entities.TrainingLog.Training", "Training")
                        .WithMany("Exercises")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.TrainingLog.Set", b =>
                {
                    b.HasOne("Backend.Domain.Entities.TrainingLog.Exercise", "Exercise")
                        .WithMany("Sets")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.TrainingLog.Training", b =>
                {
                    b.HasOne("Backend.Domain.Entities.User.ApplicationUser", "ApplicationUser")
                        .WithMany("Trainings")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.ApplicationUser", b =>
                {
                    b.HasOne("Backend.Domain.Entities.User.UserSetting", "UserSetting")
                        .WithOne("ApplicationUser")
                        .HasForeignKey("Backend.Domain.Entities.User.ApplicationUser", "UserSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.Dashboard.Track", b =>
                {
                    b.HasOne("Backend.Domain.Entities.User.Dashboard.Dashboard", "Dashboard")
                        .WithMany("Tracks")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.Dashboard.TrackItem", b =>
                {
                    b.HasOne("Backend.Domain.Entities.User.Dashboard.Track", "Track")
                        .WithMany("Items")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.NotificationSetting", b =>
                {
                    b.HasOne("Backend.Domain.Entities.User.UserSetting", "UserSetting")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.UserSetting", b =>
                {
                    b.HasOne("Backend.Domain.Entities.User.Dashboard.Dashboard", "MainDashboard")
                        .WithOne("UserSetting")
                        .HasForeignKey("Backend.Domain.Entities.User.UserSetting", "MainDashboardId");
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.Athlete", b =>
                {
                    b.HasOne("Backend.Domain.Entities.User.Coach", "Coach")
                        .WithMany("Athletes")
                        .HasForeignKey("CoachId");
                });
#pragma warning restore 612, 618
        }
    }
}
