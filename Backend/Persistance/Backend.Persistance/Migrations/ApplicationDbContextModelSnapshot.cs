// <auto-generated />
using System;
using Backend.Domain.Enum;
using Backend.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Backend.Persistance.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Backend.Domain.Entities.Auditing.AuditRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("EntityType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Table")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryKey");

                    b.HasIndex("UserId");

                    b.ToTable("Audits");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Chat.ChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ContainsMedia")
                        .HasColumnType("bit");

                    b.Property<string>("DownloadUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FileSizeInBytes")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("S3Filename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SeenAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SentAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Exercises.ExerciseType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequiresBodyweight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("RequiresReps")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("RequiresSets")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("RequiresTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("RequiresWeight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("ExerciseTypes");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Exercises.ExerciseTypeTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExerciseTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Show")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseTypeId");

                    b.HasIndex("TagId");

                    b.ToTable("ExerciseTypeTags");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Exercises.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("TagGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TagGroupId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Exercises.TagGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HexBackground")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("#fef6f9");

                    b.Property<string>("HexColor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("#616161");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("TagGroups");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Media.MediaFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUploaded")
                        .HasColumnType("datetime2");

                    b.Property<string>("DownloadUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ExerciseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Filename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FtpFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TrainingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("TrainingId");

                    b.ToTable("MediaFiles");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Notification.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Payload")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Read")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RedirectUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SentAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Subtype")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SystemNotification")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Backend.Domain.Entities.ProgressTracking.Bodyweight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Bodyweights");
                });

            modelBuilder.Entity("Backend.Domain.Entities.ProgressTracking.PersonalBest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Bodyweight")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateAchieved")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExerciseTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("IpfPoints")
                        .HasColumnType("float");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.Property<double>("WilksScore")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseTypeId");

                    b.ToTable("PBs");
                });

            modelBuilder.Entity("Backend.Domain.Entities.System.SystemLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("InnerException")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SystemLog");
                });

            modelBuilder.Entity("Backend.Domain.Entities.TrainingLog.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExerciseTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("TrainingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseTypeId");

                    b.HasIndex("TrainingId");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("Backend.Domain.Entities.TrainingLog.Set", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AverageVelocity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Intensity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ProjectedMax")
                        .HasColumnType("float");

                    b.Property<double>("Reps")
                        .HasColumnType("float");

                    b.Property<double>("Rir")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(2.0);

                    b.Property<double>("Rpe")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(8.0);

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.Property<double>("Volume")
                        .HasColumnType("float");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.ToTable("Sets");
                });

            modelBuilder.Entity("Backend.Domain.Entities.TrainingLog.Training", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTrained")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NoteRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Trainings");
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Male");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrialDuration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(15);

                    b.Property<Guid>("UserSettingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserSettingId")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("AccountType").HasValue("User");
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.Dashboard.Dashboard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserSettingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Dashboards");
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.Dashboard.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DashboardId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.Dashboard.TrackItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Component")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParamsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TrackId");

                    b.ToTable("TrackItems");
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.Dashboard.TrackItemParams", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("JsonParams")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TrackItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TrackItemId")
                        .IsUnique()
                        .HasFilter("[TrackItemId] IS NOT NULL");

                    b.ToTable("TrackItemParams");
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.NotificationSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ReceiveMail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("ReceiveNotification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid>("UserSettingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserSettingId");

                    b.ToTable("NotificationSetting");

                    b.HasData(
                        new
                        {
                            Id = new Guid("af5887e9-8006-4ce3-bf5e-a21c7bdd429b"),
                            NotificationType = "TrainingCreated",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("08ee7004-3e49-4093-9649-a544565265d3")
                        },
                        new
                        {
                            Id = new Guid("a10ab8c0-d633-4d1f-a8f9-34ad87c26200"),
                            NotificationType = "NoteAdded",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("08ee7004-3e49-4093-9649-a544565265d3")
                        },
                        new
                        {
                            Id = new Guid("bf2468c6-e58a-41a8-89c4-1057049614ae"),
                            NotificationType = "MediaAdded",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("08ee7004-3e49-4093-9649-a544565265d3")
                        },
                        new
                        {
                            Id = new Guid("e792a157-4cb5-4f2a-8566-f3bce65445a3"),
                            NotificationType = "ImportFinished",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("08ee7004-3e49-4093-9649-a544565265d3")
                        },
                        new
                        {
                            Id = new Guid("57646ddc-87b2-49c3-b413-1c3fb600d076"),
                            NotificationType = "BodyweightAdded",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("08ee7004-3e49-4093-9649-a544565265d3")
                        },
                        new
                        {
                            Id = new Guid("a2294ca1-e2b6-4d52-a1cf-bd2616a06d56"),
                            NotificationType = "PersonalBestAdded",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("08ee7004-3e49-4093-9649-a544565265d3")
                        },
                        new
                        {
                            Id = new Guid("3a31e75e-4651-42d9-baae-5ce5bfa34f36"),
                            NotificationType = "TrainingCreated",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("e0e2e219-2dee-482d-b951-2aed707cd5cb")
                        },
                        new
                        {
                            Id = new Guid("6ca101aa-3ca2-4ce9-8776-025391893e50"),
                            NotificationType = "NoteAdded",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("e0e2e219-2dee-482d-b951-2aed707cd5cb")
                        },
                        new
                        {
                            Id = new Guid("c0329313-82f4-4172-91b0-64698599d2bc"),
                            NotificationType = "MediaAdded",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("e0e2e219-2dee-482d-b951-2aed707cd5cb")
                        },
                        new
                        {
                            Id = new Guid("2314eff9-d4fd-4e39-ac34-4df59624907c"),
                            NotificationType = "ImportFinished",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("e0e2e219-2dee-482d-b951-2aed707cd5cb")
                        },
                        new
                        {
                            Id = new Guid("b5b3f332-4e5c-4ccd-8f3a-5432524f6632"),
                            NotificationType = "BodyweightAdded",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("e0e2e219-2dee-482d-b951-2aed707cd5cb")
                        },
                        new
                        {
                            Id = new Guid("48bf9d71-15dc-4dac-b682-db6964f9cd49"),
                            NotificationType = "PersonalBestAdded",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("e0e2e219-2dee-482d-b951-2aed707cd5cb")
                        },
                        new
                        {
                            Id = new Guid("52023241-1519-4ff7-b10f-2c424d13cf21"),
                            NotificationType = "TrainingCreated",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("8427aa7e-faa7-467e-853d-5df74b6d98a0")
                        },
                        new
                        {
                            Id = new Guid("b05c3356-6361-4041-8ad2-bb135b9d19b1"),
                            NotificationType = "NoteAdded",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("8427aa7e-faa7-467e-853d-5df74b6d98a0")
                        },
                        new
                        {
                            Id = new Guid("f1b6cdb5-d8e1-419b-b543-a88e3a31c385"),
                            NotificationType = "MediaAdded",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("8427aa7e-faa7-467e-853d-5df74b6d98a0")
                        },
                        new
                        {
                            Id = new Guid("ead65900-ce32-46ce-8cb2-5cd2a53bdac7"),
                            NotificationType = "ImportFinished",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("8427aa7e-faa7-467e-853d-5df74b6d98a0")
                        },
                        new
                        {
                            Id = new Guid("d866cdfe-3b70-42f5-ac9f-0f7354c7e6fd"),
                            NotificationType = "BodyweightAdded",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("8427aa7e-faa7-467e-853d-5df74b6d98a0")
                        },
                        new
                        {
                            Id = new Guid("a0e53b11-f3a3-4e2b-b047-1e07a20abba9"),
                            NotificationType = "PersonalBestAdded",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("8427aa7e-faa7-467e-853d-5df74b6d98a0")
                        },
                        new
                        {
                            Id = new Guid("0153bdf2-a955-43e9-af15-7edc5ed8cc57"),
                            NotificationType = "TrainingCreated",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("cf33c27d-af75-4d20-be23-72742e347867")
                        },
                        new
                        {
                            Id = new Guid("517db1ee-8323-450c-a471-0d00804a4616"),
                            NotificationType = "NoteAdded",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("cf33c27d-af75-4d20-be23-72742e347867")
                        },
                        new
                        {
                            Id = new Guid("3ddb6fad-87ab-4411-8523-41dcb2a4bb42"),
                            NotificationType = "MediaAdded",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("cf33c27d-af75-4d20-be23-72742e347867")
                        },
                        new
                        {
                            Id = new Guid("6ab5ede3-adfe-4b31-851c-b528f7256c31"),
                            NotificationType = "ImportFinished",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("cf33c27d-af75-4d20-be23-72742e347867")
                        },
                        new
                        {
                            Id = new Guid("fb20fa6e-2064-4d6f-8e47-3d1bc95b0a31"),
                            NotificationType = "BodyweightAdded",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("cf33c27d-af75-4d20-be23-72742e347867")
                        },
                        new
                        {
                            Id = new Guid("530ca140-49a8-4576-a27c-854b6e001218"),
                            NotificationType = "PersonalBestAdded",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("cf33c27d-af75-4d20-be23-72742e347867")
                        });
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.UserSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MainDashboardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RpeSystem")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Rpe");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Light");

                    b.Property<string>("UnitSystem")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Metric");

                    b.Property<bool>("UseRpeSystem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("MainDashboardId")
                        .IsUnique()
                        .HasFilter("[MainDashboardId] IS NOT NULL");

                    b.ToTable("UserSettings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("08ee7004-3e49-4093-9649-a544565265d3"),
                            ApplicationUserId = new Guid("cd2fbc36-65bb-44bb-9269-5748923b21e9"),
                            RpeSystem = "Rpe",
                            Theme = "Light",
                            UnitSystem = "Imperial",
                            UseRpeSystem = false
                        },
                        new
                        {
                            Id = new Guid("e0e2e219-2dee-482d-b951-2aed707cd5cb"),
                            ApplicationUserId = new Guid("3823fdab-c8b8-4921-9ad2-55727936f0c1"),
                            RpeSystem = "Rpe",
                            Theme = "Light",
                            UnitSystem = "Imperial",
                            UseRpeSystem = false
                        },
                        new
                        {
                            Id = new Guid("8427aa7e-faa7-467e-853d-5df74b6d98a0"),
                            ApplicationUserId = new Guid("962ee222-f961-4984-985d-72a803e7ae0e"),
                            RpeSystem = "Rpe",
                            Theme = "Light",
                            UnitSystem = "Imperial",
                            UseRpeSystem = false
                        },
                        new
                        {
                            Id = new Guid("cf33c27d-af75-4d20-be23-72742e347867"),
                            ApplicationUserId = new Guid("be0ae43a-25b2-410c-a645-30861526076f"),
                            RpeSystem = "Rpe",
                            Theme = "Light",
                            UnitSystem = "Imperial",
                            UseRpeSystem = false
                        });
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.Admin", b =>
                {
                    b.HasBaseType("Backend.Domain.Entities.User.ApplicationUser");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cd2fbc36-65bb-44bb-9269-5748923b21e9"),
                            AccountType = "User",
                            Active = false,
                            CreatedOn = new DateTime(2020, 3, 21, 16, 34, 39, 153, DateTimeKind.Utc).AddTicks(5215),
                            CustomerId = "cus_FLi7gZv8w0j0GB",
                            Email = "admin@trainingcompanion.com",
                            FirstName = "Admin",
                            Gender = "Male",
                            LastModified = new DateTime(2020, 3, 21, 16, 34, 39, 153, DateTimeKind.Utc).AddTicks(5949),
                            LastName = "",
                            PasswordHash = "8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918",
                            TrialDuration = 0,
                            UserSettingId = new Guid("08ee7004-3e49-4093-9649-a544565265d3"),
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.Athlete", b =>
                {
                    b.HasBaseType("Backend.Domain.Entities.User.ApplicationUser");

                    b.Property<Guid?>("CoachId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("CoachId");

                    b.HasDiscriminator().HasValue("Athlete");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3823fdab-c8b8-4921-9ad2-55727936f0c1"),
                            AccountType = "User",
                            Active = false,
                            CreatedOn = new DateTime(2020, 3, 21, 16, 34, 39, 153, DateTimeKind.Utc).AddTicks(9058),
                            Email = "athlete@trainingcompanion.com",
                            FirstName = "Athlete",
                            Gender = "Male",
                            LastModified = new DateTime(2020, 3, 21, 16, 34, 39, 153, DateTimeKind.Utc).AddTicks(9072),
                            LastName = "",
                            PasswordHash = "23a1f74bc589fe525387f8d2c40f1e552a564fe5de00af935bb7a0592fc976c6",
                            TrialDuration = 0,
                            UserSettingId = new Guid("e0e2e219-2dee-482d-b951-2aed707cd5cb"),
                            Username = "athlete",
                            CoachId = new Guid("962ee222-f961-4984-985d-72a803e7ae0e")
                        });
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.Coach", b =>
                {
                    b.HasBaseType("Backend.Domain.Entities.User.ApplicationUser");

                    b.HasDiscriminator().HasValue("Coach");

                    b.HasData(
                        new
                        {
                            Id = new Guid("962ee222-f961-4984-985d-72a803e7ae0e"),
                            AccountType = "User",
                            Active = false,
                            CreatedOn = new DateTime(2020, 3, 21, 16, 34, 39, 154, DateTimeKind.Utc).AddTicks(1772),
                            CustomerId = "cus_FHk5RepADdfm5H",
                            Email = "coach@trainingcompanion.com",
                            FirstName = "Coach",
                            Gender = "Male",
                            LastModified = new DateTime(2020, 3, 21, 16, 34, 39, 154, DateTimeKind.Utc).AddTicks(1776),
                            LastName = "",
                            PasswordHash = "e0f167bc84b881bc06f6884fb48e02f41dfc5579e25489db6c6bde238e4aed15",
                            TrialDuration = 0,
                            UserSettingId = new Guid("8427aa7e-faa7-467e-853d-5df74b6d98a0"),
                            Username = "coach"
                        });
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.SoloAthlete", b =>
                {
                    b.HasBaseType("Backend.Domain.Entities.User.ApplicationUser");

                    b.HasDiscriminator().HasValue("SoloAthlete");

                    b.HasData(
                        new
                        {
                            Id = new Guid("be0ae43a-25b2-410c-a645-30861526076f"),
                            AccountType = "User",
                            Active = false,
                            CreatedOn = new DateTime(2020, 3, 21, 16, 34, 39, 153, DateTimeKind.Utc).AddTicks(9876),
                            Email = "solo.athlete@trainingcompanion.com",
                            FirstName = "Solo",
                            Gender = "Male",
                            LastModified = new DateTime(2020, 3, 21, 16, 34, 39, 153, DateTimeKind.Utc).AddTicks(9880),
                            LastName = "Athlete",
                            PasswordHash = "304301ea5935cd1d38e55206e09eebcfe95fcb56f96ddf0ef2d8557a295728c8",
                            TrialDuration = 0,
                            UserSettingId = new Guid("cf33c27d-af75-4d20-be23-72742e347867"),
                            Username = "soloathlete"
                        });
                });

            modelBuilder.Entity("Backend.Domain.Entities.Chat.ChatMessage", b =>
                {
                    b.HasOne("Backend.Domain.Entities.User.ApplicationUser", "Sender")
                        .WithMany("ChatMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.Exercises.ExerciseType", b =>
                {
                    b.HasOne("Backend.Domain.Entities.User.ApplicationUser", "ApplicationUser")
                        .WithMany("ExerciseTypes")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.Exercises.ExerciseTypeTag", b =>
                {
                    b.HasOne("Backend.Domain.Entities.Exercises.ExerciseType", "ExerciseType")
                        .WithMany("Properties")
                        .HasForeignKey("ExerciseTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Entities.Exercises.Tag", "Tag")
                        .WithMany("ExerciseTypeTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.Exercises.Tag", b =>
                {
                    b.HasOne("Backend.Domain.Entities.Exercises.TagGroup", "TagGroup")
                        .WithMany("Tags")
                        .HasForeignKey("TagGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.Exercises.TagGroup", b =>
                {
                    b.HasOne("Backend.Domain.Entities.User.ApplicationUser", "ApplicationUser")
                        .WithMany("TagGroups")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.Media.MediaFile", b =>
                {
                    b.HasOne("Backend.Domain.Entities.User.ApplicationUser", "ApplicationUser")
                        .WithMany("MediaFiles")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Entities.TrainingLog.Exercise", "Exercise")
                        .WithMany("Media")
                        .HasForeignKey("ExerciseId");

                    b.HasOne("Backend.Domain.Entities.TrainingLog.Training", "Training")
                        .WithMany("Media")
                        .HasForeignKey("TrainingId");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Notification.Notification", b =>
                {
                    b.HasOne("Backend.Domain.Entities.User.ApplicationUser", "Receiver")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Backend.Domain.Entities.User.ApplicationUser", "Sender")
                        .WithMany("SentNotifications")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Backend.Domain.Entities.ProgressTracking.Bodyweight", b =>
                {
                    b.HasOne("Backend.Domain.Entities.User.ApplicationUser", "User")
                        .WithMany("Bodyweights")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.ProgressTracking.PersonalBest", b =>
                {
                    b.HasOne("Backend.Domain.Entities.Exercises.ExerciseType", "ExerciseType")
                        .WithMany("PBs")
                        .HasForeignKey("ExerciseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.TrainingLog.Exercise", b =>
                {
                    b.HasOne("Backend.Domain.Entities.Exercises.ExerciseType", "ExerciseType")
                        .WithMany("Exercises")
                        .HasForeignKey("ExerciseTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Entities.TrainingLog.Training", "Training")
                        .WithMany("Exercises")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.TrainingLog.Set", b =>
                {
                    b.HasOne("Backend.Domain.Entities.TrainingLog.Exercise", "Exercise")
                        .WithMany("Sets")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.TrainingLog.Training", b =>
                {
                    b.HasOne("Backend.Domain.Entities.User.ApplicationUser", "ApplicationUser")
                        .WithMany("Trainings")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.ApplicationUser", b =>
                {
                    b.HasOne("Backend.Domain.Entities.User.UserSetting", "UserSetting")
                        .WithOne("ApplicationUser")
                        .HasForeignKey("Backend.Domain.Entities.User.ApplicationUser", "UserSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.Dashboard.Track", b =>
                {
                    b.HasOne("Backend.Domain.Entities.User.Dashboard.Dashboard", "Dashboard")
                        .WithMany("Tracks")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.Dashboard.TrackItem", b =>
                {
                    b.HasOne("Backend.Domain.Entities.User.Dashboard.Track", "Track")
                        .WithMany("Items")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.Dashboard.TrackItemParams", b =>
                {
                    b.HasOne("Backend.Domain.Entities.User.Dashboard.TrackItem", "TrackItem")
                        .WithOne("Params")
                        .HasForeignKey("Backend.Domain.Entities.User.Dashboard.TrackItemParams", "TrackItemId");
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.NotificationSetting", b =>
                {
                    b.HasOne("Backend.Domain.Entities.User.UserSetting", "UserSetting")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.UserSetting", b =>
                {
                    b.HasOne("Backend.Domain.Entities.User.Dashboard.Dashboard", "MainDashboard")
                        .WithOne("UserSetting")
                        .HasForeignKey("Backend.Domain.Entities.User.UserSetting", "MainDashboardId");
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.Athlete", b =>
                {
                    b.HasOne("Backend.Domain.Entities.User.Coach", "Coach")
                        .WithMany("Athletes")
                        .HasForeignKey("CoachId");
                });
#pragma warning restore 612, 618
        }
    }
}
