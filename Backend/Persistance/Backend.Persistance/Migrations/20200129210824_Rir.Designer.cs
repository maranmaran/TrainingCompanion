// <auto-generated />
using System;
using Backend.Domain.Enum;
using Backend.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Backend.Persistance.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200129210824_Rir")]
    partial class Rir
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Backend.Domain.Entities.Chat.ChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ContainsMedia")
                        .HasColumnType("bit");

                    b.Property<string>("DownloadUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FileSizeInBytes")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("S3Filename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SeenAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SentAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Dashboard.Dashboard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserSettingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Dashboards");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Dashboard.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DashboardId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Dashboard.TrackItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Component")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParamsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TrackId");

                    b.ToTable("TrackItems");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Dashboard.TrackItemParams", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("JsonParams")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TrackItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TrackItemId")
                        .IsUnique()
                        .HasFilter("[TrackItemId] IS NOT NULL");

                    b.ToTable("TrackItemParams");
                });

            modelBuilder.Entity("Backend.Domain.Entities.ExerciseType.ExerciseType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequiresBodyweight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("RequiresReps")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("RequiresSets")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("RequiresTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("RequiresWeight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("ExerciseTypes");
                });

            modelBuilder.Entity("Backend.Domain.Entities.ExerciseType.ExerciseTypeTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExerciseTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Show")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseTypeId");

                    b.HasIndex("TagId");

                    b.ToTable("ExerciseTypeTags");
                });

            modelBuilder.Entity("Backend.Domain.Entities.ExerciseType.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("TagGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TagGroupId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Backend.Domain.Entities.ExerciseType.TagGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HexBackground")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("#fef6f9");

                    b.Property<string>("HexColor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("#616161");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("TagGroups");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Media.MediaFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUploaded")
                        .HasColumnType("datetime2");

                    b.Property<string>("DownloadUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ExerciseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Filename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FtpFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TrainingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("TrainingId");

                    b.ToTable("MediaFiles");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Notification.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Payload")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Read")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RedirectUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SentAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Subtype")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SystemNotification")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Backend.Domain.Entities.ProgressTracking.Max.ExerciseMax", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateAchieved")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExerciseTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("IpfPoints")
                        .HasColumnType("float");

                    b.Property<double>("Max")
                        .HasColumnType("float");

                    b.Property<double>("WilksScore")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseTypeId");

                    b.ToTable("ExerciseMax");
                });

            modelBuilder.Entity("Backend.Domain.Entities.System.SystemException", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("InnerException")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SystemExceptions");
                });

            modelBuilder.Entity("Backend.Domain.Entities.TrainingLog.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExerciseTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TrainingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseTypeId");

                    b.HasIndex("TrainingId");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("Backend.Domain.Entities.TrainingLog.Set", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AverageVelocity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Intensity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ProjectedMax")
                        .HasColumnType("float");

                    b.Property<double>("Reps")
                        .HasColumnType("float");

                    b.Property<double>("Rir")
                        .HasColumnType("float");

                    b.Property<double>("Rpe")
                        .HasColumnType("float");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.Property<double>("Volume")
                        .HasColumnType("float");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.ToTable("Sets");
                });

            modelBuilder.Entity("Backend.Domain.Entities.TrainingLog.Training", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTrained")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NoteRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Trainings");
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Male");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrialDuration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(15);

                    b.Property<Guid>("UserSettingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserSettingId")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("AccountType").HasValue("User");
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.NotificationSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ReceiveMail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("ReceiveNotification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid>("UserSettingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserSettingId");

                    b.ToTable("NotificationSetting");

                    b.HasData(
                        new
                        {
                            Id = new Guid("75c4f448-2651-4929-86a5-caad044face1"),
                            NotificationType = "TrainingCreated",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("05a814f0-ea8f-4598-bf9b-199c17443181")
                        },
                        new
                        {
                            Id = new Guid("97f0c8e2-ad6a-4746-8897-badc281bd438"),
                            NotificationType = "NoteAdded",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("05a814f0-ea8f-4598-bf9b-199c17443181")
                        },
                        new
                        {
                            Id = new Guid("c349eba9-8f04-45b7-b94f-8039f2e28396"),
                            NotificationType = "MediaAdded",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("05a814f0-ea8f-4598-bf9b-199c17443181")
                        },
                        new
                        {
                            Id = new Guid("445ce141-24d9-43b9-b493-6065a6b3eef8"),
                            NotificationType = "ImportFinished",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("05a814f0-ea8f-4598-bf9b-199c17443181")
                        },
                        new
                        {
                            Id = new Guid("92a2f133-f4f6-43f0-ac32-b8f169add60c"),
                            NotificationType = "TrainingCreated",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("de54880c-59ba-4ee7-b9ce-e12a56e11784")
                        },
                        new
                        {
                            Id = new Guid("0f230ede-374c-40b3-a774-98bc14fadc5e"),
                            NotificationType = "NoteAdded",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("de54880c-59ba-4ee7-b9ce-e12a56e11784")
                        },
                        new
                        {
                            Id = new Guid("b8dfe095-9b17-403b-ba88-bb8170fca359"),
                            NotificationType = "MediaAdded",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("de54880c-59ba-4ee7-b9ce-e12a56e11784")
                        },
                        new
                        {
                            Id = new Guid("bbec5371-ae2c-4e3f-a249-b616edaea4d6"),
                            NotificationType = "ImportFinished",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("de54880c-59ba-4ee7-b9ce-e12a56e11784")
                        },
                        new
                        {
                            Id = new Guid("443edf01-19d5-4113-8347-d7083c1763dc"),
                            NotificationType = "TrainingCreated",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("5fa0b7ae-6729-459e-9802-aae8ac7eec02")
                        },
                        new
                        {
                            Id = new Guid("cbb4e2cb-a77e-41c9-a71c-404b9ab6795f"),
                            NotificationType = "NoteAdded",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("5fa0b7ae-6729-459e-9802-aae8ac7eec02")
                        },
                        new
                        {
                            Id = new Guid("8c1c4db7-7049-42c3-bfd0-8ddc831a71b9"),
                            NotificationType = "MediaAdded",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("5fa0b7ae-6729-459e-9802-aae8ac7eec02")
                        },
                        new
                        {
                            Id = new Guid("66b3a64d-1a20-41eb-b1c0-7347df15313f"),
                            NotificationType = "ImportFinished",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("5fa0b7ae-6729-459e-9802-aae8ac7eec02")
                        },
                        new
                        {
                            Id = new Guid("b4b97e18-5d3a-478d-b242-debb3e878177"),
                            NotificationType = "TrainingCreated",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("da0bea1d-158c-40d0-94b8-9564925cae21")
                        },
                        new
                        {
                            Id = new Guid("62b0520b-2d9e-4ba9-9bde-beb1ac2fcc10"),
                            NotificationType = "NoteAdded",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("da0bea1d-158c-40d0-94b8-9564925cae21")
                        },
                        new
                        {
                            Id = new Guid("845007ff-8274-4b3d-b872-cb4a7fc6268f"),
                            NotificationType = "MediaAdded",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("da0bea1d-158c-40d0-94b8-9564925cae21")
                        },
                        new
                        {
                            Id = new Guid("71a237f5-1882-4293-b9e7-8391d87b3356"),
                            NotificationType = "ImportFinished",
                            ReceiveMail = false,
                            ReceiveNotification = false,
                            UserSettingId = new Guid("da0bea1d-158c-40d0-94b8-9564925cae21")
                        });
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.UserSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MainDashboardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RpeSystem")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Rpe");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Light");

                    b.Property<string>("UnitSystem")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Metric");

                    b.Property<bool>("UseRpeSystem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("MainDashboardId")
                        .IsUnique()
                        .HasFilter("[MainDashboardId] IS NOT NULL");

                    b.ToTable("UserSettings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("05a814f0-ea8f-4598-bf9b-199c17443181"),
                            ApplicationUserId = new Guid("55c52f06-492f-4c4f-8c3e-fd470f347e6b"),
                            RpeSystem = "Rpe",
                            Theme = "Light",
                            UnitSystem = "Imperial",
                            UseRpeSystem = false
                        },
                        new
                        {
                            Id = new Guid("de54880c-59ba-4ee7-b9ce-e12a56e11784"),
                            ApplicationUserId = new Guid("cb81f191-6f5a-4d9b-a611-8cbfbabc9cfa"),
                            RpeSystem = "Rpe",
                            Theme = "Light",
                            UnitSystem = "Imperial",
                            UseRpeSystem = false
                        },
                        new
                        {
                            Id = new Guid("5fa0b7ae-6729-459e-9802-aae8ac7eec02"),
                            ApplicationUserId = new Guid("dfb7be8e-661a-467a-bc94-4a09f38afea4"),
                            RpeSystem = "Rpe",
                            Theme = "Light",
                            UnitSystem = "Imperial",
                            UseRpeSystem = false
                        },
                        new
                        {
                            Id = new Guid("da0bea1d-158c-40d0-94b8-9564925cae21"),
                            ApplicationUserId = new Guid("1f1ed676-0a96-48b1-968f-6763e8d2827a"),
                            RpeSystem = "Rpe",
                            Theme = "Light",
                            UnitSystem = "Imperial",
                            UseRpeSystem = false
                        });
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.Admin", b =>
                {
                    b.HasBaseType("Backend.Domain.Entities.User.ApplicationUser");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new
                        {
                            Id = new Guid("55c52f06-492f-4c4f-8c3e-fd470f347e6b"),
                            AccountType = "User",
                            Active = false,
                            CreatedOn = new DateTime(2020, 1, 29, 21, 8, 22, 724, DateTimeKind.Utc).AddTicks(501),
                            CustomerId = "cus_FLi7gZv8w0j0GB",
                            Email = "admin@trainingcompanion.com",
                            FirstName = "Admin",
                            Gender = "Male",
                            LastModified = new DateTime(2020, 1, 29, 21, 8, 22, 724, DateTimeKind.Utc).AddTicks(1180),
                            LastName = "",
                            PasswordHash = "8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918",
                            TrialDuration = 0,
                            UserSettingId = new Guid("05a814f0-ea8f-4598-bf9b-199c17443181"),
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.Athlete", b =>
                {
                    b.HasBaseType("Backend.Domain.Entities.User.ApplicationUser");

                    b.Property<Guid?>("CoachId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("CoachId");

                    b.HasDiscriminator().HasValue("Athlete");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cb81f191-6f5a-4d9b-a611-8cbfbabc9cfa"),
                            AccountType = "User",
                            Active = false,
                            CreatedOn = new DateTime(2020, 1, 29, 21, 8, 22, 724, DateTimeKind.Utc).AddTicks(4078),
                            Email = "athlete@trainingcompanion.com",
                            FirstName = "Athlete",
                            Gender = "Male",
                            LastModified = new DateTime(2020, 1, 29, 21, 8, 22, 724, DateTimeKind.Utc).AddTicks(4097),
                            LastName = "",
                            PasswordHash = "23a1f74bc589fe525387f8d2c40f1e552a564fe5de00af935bb7a0592fc976c6",
                            TrialDuration = 0,
                            UserSettingId = new Guid("de54880c-59ba-4ee7-b9ce-e12a56e11784"),
                            Username = "athlete",
                            CoachId = new Guid("dfb7be8e-661a-467a-bc94-4a09f38afea4")
                        });
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.Coach", b =>
                {
                    b.HasBaseType("Backend.Domain.Entities.User.ApplicationUser");

                    b.HasDiscriminator().HasValue("Coach");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dfb7be8e-661a-467a-bc94-4a09f38afea4"),
                            AccountType = "User",
                            Active = false,
                            CreatedOn = new DateTime(2020, 1, 29, 21, 8, 22, 724, DateTimeKind.Utc).AddTicks(6615),
                            CustomerId = "cus_FHk5RepADdfm5H",
                            Email = "coach@trainingcompanion.com",
                            FirstName = "Coach",
                            Gender = "Male",
                            LastModified = new DateTime(2020, 1, 29, 21, 8, 22, 724, DateTimeKind.Utc).AddTicks(6620),
                            LastName = "",
                            PasswordHash = "e0f167bc84b881bc06f6884fb48e02f41dfc5579e25489db6c6bde238e4aed15",
                            TrialDuration = 0,
                            UserSettingId = new Guid("5fa0b7ae-6729-459e-9802-aae8ac7eec02"),
                            Username = "coach"
                        });
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.SoloAthlete", b =>
                {
                    b.HasBaseType("Backend.Domain.Entities.User.ApplicationUser");

                    b.HasDiscriminator().HasValue("SoloAthlete");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f1ed676-0a96-48b1-968f-6763e8d2827a"),
                            AccountType = "User",
                            Active = false,
                            CreatedOn = new DateTime(2020, 1, 29, 21, 8, 22, 724, DateTimeKind.Utc).AddTicks(4839),
                            Email = "solo.athlete@trainingcompanion.com",
                            FirstName = "Solo",
                            Gender = "Male",
                            LastModified = new DateTime(2020, 1, 29, 21, 8, 22, 724, DateTimeKind.Utc).AddTicks(4843),
                            LastName = "Athlete",
                            PasswordHash = "304301ea5935cd1d38e55206e09eebcfe95fcb56f96ddf0ef2d8557a295728c8",
                            TrialDuration = 0,
                            UserSettingId = new Guid("da0bea1d-158c-40d0-94b8-9564925cae21"),
                            Username = "soloathlete"
                        });
                });

            modelBuilder.Entity("Backend.Domain.Entities.Chat.ChatMessage", b =>
                {
                    b.HasOne("Backend.Domain.Entities.User.ApplicationUser", "Sender")
                        .WithMany("ChatMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.Dashboard.Track", b =>
                {
                    b.HasOne("Backend.Domain.Entities.Dashboard.Dashboard", "Dashboard")
                        .WithMany("Tracks")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.Dashboard.TrackItem", b =>
                {
                    b.HasOne("Backend.Domain.Entities.Dashboard.Track", "Track")
                        .WithMany("Items")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.Dashboard.TrackItemParams", b =>
                {
                    b.HasOne("Backend.Domain.Entities.Dashboard.TrackItem", "TrackItem")
                        .WithOne("Params")
                        .HasForeignKey("Backend.Domain.Entities.Dashboard.TrackItemParams", "TrackItemId");
                });

            modelBuilder.Entity("Backend.Domain.Entities.ExerciseType.ExerciseType", b =>
                {
                    b.HasOne("Backend.Domain.Entities.User.ApplicationUser", "ApplicationUser")
                        .WithMany("ExerciseTypes")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.ExerciseType.ExerciseTypeTag", b =>
                {
                    b.HasOne("Backend.Domain.Entities.ExerciseType.ExerciseType", "ExerciseType")
                        .WithMany("Properties")
                        .HasForeignKey("ExerciseTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Entities.ExerciseType.Tag", "Tag")
                        .WithMany("ExerciseTypeTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.ExerciseType.Tag", b =>
                {
                    b.HasOne("Backend.Domain.Entities.ExerciseType.TagGroup", "TagGroup")
                        .WithMany("Tags")
                        .HasForeignKey("TagGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.ExerciseType.TagGroup", b =>
                {
                    b.HasOne("Backend.Domain.Entities.User.ApplicationUser", "ApplicationUser")
                        .WithMany("TagGroups")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.Media.MediaFile", b =>
                {
                    b.HasOne("Backend.Domain.Entities.User.ApplicationUser", "ApplicationUser")
                        .WithMany("MediaFiles")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Entities.TrainingLog.Exercise", "Exercise")
                        .WithMany("Media")
                        .HasForeignKey("ExerciseId");

                    b.HasOne("Backend.Domain.Entities.TrainingLog.Training", "Training")
                        .WithMany("Media")
                        .HasForeignKey("TrainingId");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Notification.Notification", b =>
                {
                    b.HasOne("Backend.Domain.Entities.User.ApplicationUser", "Receiver")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Backend.Domain.Entities.User.ApplicationUser", "Sender")
                        .WithMany("SentNotifications")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Backend.Domain.Entities.ProgressTracking.Max.ExerciseMax", b =>
                {
                    b.HasOne("Backend.Domain.Entities.ExerciseType.ExerciseType", "ExerciseType")
                        .WithMany("ExerciseMaxes")
                        .HasForeignKey("ExerciseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.TrainingLog.Exercise", b =>
                {
                    b.HasOne("Backend.Domain.Entities.ExerciseType.ExerciseType", "ExerciseType")
                        .WithMany("Exercises")
                        .HasForeignKey("ExerciseTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Entities.TrainingLog.Training", "Training")
                        .WithMany("Exercises")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.TrainingLog.Set", b =>
                {
                    b.HasOne("Backend.Domain.Entities.TrainingLog.Exercise", "Exercise")
                        .WithMany("Sets")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.TrainingLog.Training", b =>
                {
                    b.HasOne("Backend.Domain.Entities.User.ApplicationUser", "ApplicationUser")
                        .WithMany("Trainings")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.ApplicationUser", b =>
                {
                    b.HasOne("Backend.Domain.Entities.User.UserSetting", "UserSetting")
                        .WithOne("ApplicationUser")
                        .HasForeignKey("Backend.Domain.Entities.User.ApplicationUser", "UserSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.NotificationSetting", b =>
                {
                    b.HasOne("Backend.Domain.Entities.User.UserSetting", "UserSetting")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.UserSetting", b =>
                {
                    b.HasOne("Backend.Domain.Entities.Dashboard.Dashboard", "MainDashboard")
                        .WithOne("UserSetting")
                        .HasForeignKey("Backend.Domain.Entities.User.UserSetting", "MainDashboardId");
                });

            modelBuilder.Entity("Backend.Domain.Entities.User.Athlete", b =>
                {
                    b.HasOne("Backend.Domain.Entities.User.Coach", "Coach")
                        .WithMany("Athletes")
                        .HasForeignKey("CoachId");
                });
#pragma warning restore 612, 618
        }
    }
}
