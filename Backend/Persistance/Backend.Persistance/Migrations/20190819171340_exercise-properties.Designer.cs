// <auto-generated />
using System;
using Backend.Domain.Enum;
using Backend.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Backend.Persistance.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190819171340_exercise-properties")]
    partial class exerciseproperties
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Backend.Domain.Entities.Chat.ChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("ContainsMedia");

                    b.Property<string>("DownloadUrl");

                    b.Property<int?>("FileSizeInBytes");

                    b.Property<string>("Message");

                    b.Property<Guid?>("ReceiverId");

                    b.Property<string>("S3Filename");

                    b.Property<DateTime?>("SeenAt");

                    b.Property<Guid>("SenderId");

                    b.Property<DateTime>("SentAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("Backend.Domain.Entities.ExerciseType.ExerciseType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<Guid?>("AdminId");

                    b.Property<Guid>("AthleteId");

                    b.Property<Guid>("BarPositionId");

                    b.Property<Guid>("BarTypeId");

                    b.Property<Guid>("CategoryId");

                    b.Property<Guid?>("CoachId");

                    b.Property<Guid>("GripId");

                    b.Property<string>("Name");

                    b.Property<Guid>("RangeOfMotionId");

                    b.Property<bool?>("RequiresBodyweight");

                    b.Property<bool?>("RequiresReps");

                    b.Property<bool?>("RequiresSets");

                    b.Property<bool?>("RequiresTime");

                    b.Property<bool?>("RequiresWeight");

                    b.Property<Guid?>("SoloAthleteId");

                    b.Property<Guid>("StanceId");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("AthleteId");

                    b.HasIndex("BarPositionId");

                    b.HasIndex("BarTypeId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CoachId");

                    b.HasIndex("GripId");

                    b.HasIndex("RangeOfMotionId");

                    b.HasIndex("SoloAthleteId");

                    b.HasIndex("StanceId");

                    b.ToTable("ExerciseTypes");
                });

            modelBuilder.Entity("Backend.Domain.Entities.ExerciseType.Properties.BarPosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<Guid?>("ApplicationUserId");

                    b.Property<int>("Order");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("BarPositions");
                });

            modelBuilder.Entity("Backend.Domain.Entities.ExerciseType.Properties.BarType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<Guid?>("ApplicationUserId");

                    b.Property<int>("Order");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("BarTypes");
                });

            modelBuilder.Entity("Backend.Domain.Entities.ExerciseType.Properties.ExerciseCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<Guid?>("ApplicationUserId");

                    b.Property<int>("Order");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("ExerciseCategories");
                });

            modelBuilder.Entity("Backend.Domain.Entities.ExerciseType.Properties.ExerciseEquipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<Guid?>("ApplicationUserId");

                    b.Property<Guid?>("ExerciseTypeId");

                    b.Property<int>("Order");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ExerciseTypeId");

                    b.ToTable("ExerciseEquipments");
                });

            modelBuilder.Entity("Backend.Domain.Entities.ExerciseType.Properties.Grip", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<Guid?>("ApplicationUserId");

                    b.Property<int>("Order");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Grips");
                });

            modelBuilder.Entity("Backend.Domain.Entities.ExerciseType.Properties.LoadAccomodation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<Guid?>("ApplicationUserId");

                    b.Property<Guid?>("ExerciseTypeId");

                    b.Property<int>("Order");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ExerciseTypeId");

                    b.ToTable("LoadAccomodations");
                });

            modelBuilder.Entity("Backend.Domain.Entities.ExerciseType.Properties.RangeOfMotion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<Guid?>("ApplicationUserId");

                    b.Property<int>("Order");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("RangeOfMotions");
                });

            modelBuilder.Entity("Backend.Domain.Entities.ExerciseType.Properties.Stance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<Guid?>("ApplicationUserId");

                    b.Property<int>("Order");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Stances");
                });

            modelBuilder.Entity("Backend.Domain.Entities.ExerciseType.Properties.Tempo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<Guid?>("ApplicationUserId");

                    b.Property<Guid?>("ExerciseTypeId");

                    b.Property<int>("Order");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ExerciseTypeId");

                    b.ToTable("Tempos");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Media.MediaFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ApplicationUserId");

                    b.Property<DateTime>("DateModified");

                    b.Property<DateTime>("DateUploaded");

                    b.Property<string>("DownloadUrl");

                    b.Property<string>("Filename");

                    b.Property<string>("FtpFilePath");

                    b.Property<Guid?>("TrainingId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("TrainingId");

                    b.ToTable("MediaFiles");
                });

            modelBuilder.Entity("Backend.Domain.Entities.ProgressTracking.Max.ExerciseMax", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ExerciseTypeId");

                    b.Property<double>("IpfPoints");

                    b.Property<double>("Max");

                    b.Property<double>("WilksScore");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseTypeId");

                    b.ToTable("ExerciseMax");
                });

            modelBuilder.Entity("Backend.Domain.Entities.System.SystemException", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("InnerException");

                    b.Property<string>("Message");

                    b.Property<int>("StatusCode");

                    b.HasKey("Id");

                    b.ToTable("SystemExceptions");
                });

            modelBuilder.Entity("Backend.Domain.Entities.TrainingLog.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ExerciseTypeId");

                    b.Property<int>("Sets");

                    b.Property<Guid?>("TrainingId");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseTypeId");

                    b.HasIndex("TrainingId");

                    b.ToTable("Exercise");
                });

            modelBuilder.Entity("Backend.Domain.Entities.TrainingLog.Lift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AverageVelocity");

                    b.Property<Guid?>("ExerciseId");

                    b.Property<string>("Intensity");

                    b.Property<double>("ProjectedMax");

                    b.Property<double>("Reps");

                    b.Property<double>("Rpe");

                    b.Property<TimeSpan>("Time");

                    b.Property<double>("Volume");

                    b.Property<double>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.ToTable("Lift");
                });

            modelBuilder.Entity("Backend.Domain.Entities.TrainingLog.Training", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateTrained");

                    b.Property<string>("Note");

                    b.Property<bool>("NoteRead");

                    b.Property<Guid>("ApplicationUserId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Training");
                });

            modelBuilder.Entity("Backend.Domain.Entities.ApplicationUser.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("Coach");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Avatar");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CustomerId");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("Male");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastName");

                    b.Property<string>("PasswordHash");

                    b.Property<int>("TrialDuration")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(15);

                    b.Property<Guid?>("UserSettingsId");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.HasIndex("UserSettingsId");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("AccountType").HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Backend.Domain.Entities.ApplicationUser.UserSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RpeSystem")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("Rpe");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("Light");

                    b.Property<string>("UnitSystem")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("Metric");

                    b.Property<bool>("UseRpeSystem")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("Backend.Domain.Entities.ApplicationUser.Admin", b =>
                {
                    b.HasBaseType("Backend.Domain.Entities.ApplicationUser.ApplicationUser");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("Backend.Domain.Entities.ApplicationUser.Athlete", b =>
                {
                    b.HasBaseType("Backend.Domain.Entities.ApplicationUser.ApplicationUser");

                    b.Property<Guid?>("CoachId");

                    b.HasIndex("CoachId");

                    b.HasDiscriminator().HasValue("Athlete");
                });

            modelBuilder.Entity("Backend.Domain.Entities.ApplicationUser.Coach", b =>
                {
                    b.HasBaseType("Backend.Domain.Entities.ApplicationUser.ApplicationUser");

                    b.HasDiscriminator().HasValue("Coach");
                });

            modelBuilder.Entity("Backend.Domain.Entities.ApplicationUser.SoloAthlete", b =>
                {
                    b.HasBaseType("Backend.Domain.Entities.ApplicationUser.ApplicationUser");

                    b.HasDiscriminator().HasValue("SoloAthlete");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Chat.ChatMessage", b =>
                {
                    b.HasOne("Backend.Domain.Entities.ApplicationUser.ApplicationUser", "Sender")
                        .WithMany("ChatMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Backend.Domain.Entities.ExerciseType.ExerciseType", b =>
                {
                    b.HasOne("Backend.Domain.Entities.ApplicationUser.Admin")
                        .WithMany("ExerciseTypes")
                        .HasForeignKey("AdminId");

                    b.HasOne("Backend.Domain.Entities.ApplicationUser.Athlete", "Athlete")
                        .WithMany("ExerciseTypes")
                        .HasForeignKey("AthleteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Backend.Domain.Entities.ExerciseType.Properties.BarPosition", "BarPosition")
                        .WithMany()
                        .HasForeignKey("BarPositionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Backend.Domain.Entities.ExerciseType.Properties.BarType", "BarType")
                        .WithMany()
                        .HasForeignKey("BarTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Backend.Domain.Entities.ExerciseType.Properties.ExerciseCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Backend.Domain.Entities.ApplicationUser.Coach")
                        .WithMany("ExerciseTypes")
                        .HasForeignKey("CoachId");

                    b.HasOne("Backend.Domain.Entities.ExerciseType.Properties.Grip", "Grip")
                        .WithMany()
                        .HasForeignKey("GripId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Backend.Domain.Entities.ExerciseType.Properties.RangeOfMotion", "RangeOfMotion")
                        .WithMany()
                        .HasForeignKey("RangeOfMotionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Backend.Domain.Entities.ApplicationUser.SoloAthlete")
                        .WithMany("ExerciseTypes")
                        .HasForeignKey("SoloAthleteId");

                    b.HasOne("Backend.Domain.Entities.ExerciseType.Properties.Stance", "Stance")
                        .WithMany()
                        .HasForeignKey("StanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Backend.Domain.Entities.ExerciseType.Properties.BarPosition", b =>
                {
                    b.HasOne("Backend.Domain.Entities.ApplicationUser.ApplicationUser")
                        .WithMany("BarPositions")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("Backend.Domain.Entities.ExerciseType.Properties.BarType", b =>
                {
                    b.HasOne("Backend.Domain.Entities.ApplicationUser.ApplicationUser")
                        .WithMany("BarTypes")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("Backend.Domain.Entities.ExerciseType.Properties.ExerciseCategory", b =>
                {
                    b.HasOne("Backend.Domain.Entities.ApplicationUser.ApplicationUser")
                        .WithMany("ExerciseCategories")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("Backend.Domain.Entities.ExerciseType.Properties.ExerciseEquipment", b =>
                {
                    b.HasOne("Backend.Domain.Entities.ApplicationUser.ApplicationUser")
                        .WithMany("ExerciseEquipments")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Backend.Domain.Entities.ExerciseType.ExerciseType")
                        .WithMany("Equipment")
                        .HasForeignKey("ExerciseTypeId");
                });

            modelBuilder.Entity("Backend.Domain.Entities.ExerciseType.Properties.Grip", b =>
                {
                    b.HasOne("Backend.Domain.Entities.ApplicationUser.ApplicationUser")
                        .WithMany("Grips")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("Backend.Domain.Entities.ExerciseType.Properties.LoadAccomodation", b =>
                {
                    b.HasOne("Backend.Domain.Entities.ApplicationUser.ApplicationUser")
                        .WithMany("LoadAccomodations")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Backend.Domain.Entities.ExerciseType.ExerciseType")
                        .WithMany("LoadAccomodation")
                        .HasForeignKey("ExerciseTypeId");
                });

            modelBuilder.Entity("Backend.Domain.Entities.ExerciseType.Properties.RangeOfMotion", b =>
                {
                    b.HasOne("Backend.Domain.Entities.ApplicationUser.ApplicationUser")
                        .WithMany("RangeOfMotions")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("Backend.Domain.Entities.ExerciseType.Properties.Stance", b =>
                {
                    b.HasOne("Backend.Domain.Entities.ApplicationUser.ApplicationUser")
                        .WithMany("Stances")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("Backend.Domain.Entities.ExerciseType.Properties.Tempo", b =>
                {
                    b.HasOne("Backend.Domain.Entities.ApplicationUser.ApplicationUser")
                        .WithMany("Tempos")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Backend.Domain.Entities.ExerciseType.ExerciseType")
                        .WithMany("Tempos")
                        .HasForeignKey("ExerciseTypeId");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Media.MediaFile", b =>
                {
                    b.HasOne("Backend.Domain.Entities.ApplicationUser.ApplicationUser", "ApplicationUser")
                        .WithMany("MediaFiles")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Backend.Domain.Entities.TrainingLog.Training")
                        .WithMany("Media")
                        .HasForeignKey("TrainingId");
                });

            modelBuilder.Entity("Backend.Domain.Entities.ProgressTracking.Max.ExerciseMax", b =>
                {
                    b.HasOne("Backend.Domain.Entities.ExerciseType.ExerciseType", "ExerciseType")
                        .WithMany("ExerciseMaxes")
                        .HasForeignKey("ExerciseTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Backend.Domain.Entities.TrainingLog.Exercise", b =>
                {
                    b.HasOne("Backend.Domain.Entities.ExerciseType.ExerciseType", "ExerciseType")
                        .WithMany()
                        .HasForeignKey("ExerciseTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Backend.Domain.Entities.TrainingLog.Training")
                        .WithMany("Exercises")
                        .HasForeignKey("TrainingId");
                });

            modelBuilder.Entity("Backend.Domain.Entities.TrainingLog.Lift", b =>
                {
                    b.HasOne("Backend.Domain.Entities.TrainingLog.Exercise")
                        .WithMany("Lifts")
                        .HasForeignKey("ExerciseId");
                });

            modelBuilder.Entity("Backend.Domain.Entities.TrainingLog.Training", b =>
                {
                    b.HasOne("Backend.Domain.Entities.ApplicationUser.ApplicationUser", "ApplicationUser")
                        .WithMany("Trainings")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Backend.Domain.Entities.ApplicationUser.ApplicationUser", b =>
                {
                    b.HasOne("Backend.Domain.Entities.ApplicationUser.UserSettings", "UserSettings")
                        .WithMany()
                        .HasForeignKey("UserSettingsId");
                });

            modelBuilder.Entity("Backend.Domain.Entities.ApplicationUser.Athlete", b =>
                {
                    b.HasOne("Backend.Domain.Entities.ApplicationUser.Coach", "Coach")
                        .WithMany("Athletes")
                        .HasForeignKey("CoachId");
                });
#pragma warning restore 612, 618
        }
    }
}
