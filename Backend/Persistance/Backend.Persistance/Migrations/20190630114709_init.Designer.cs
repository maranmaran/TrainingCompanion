// <auto-generated />
using System;
using Backend.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Backend.Persistance.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190630114709_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Backend.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("Waiting");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("User");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CustomerId");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastName");

                    b.Property<Guid?>("ParentId");

                    b.Property<string>("PasswordHash");

                    b.Property<int>("TrialDuration")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(15);

                    b.Property<Guid?>("UserSettingsId");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("UserSettingsId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Backend.Domain.Entities.ChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ChatRoomId");

                    b.Property<bool>("ContainsMedia");

                    b.Property<bool>("MediaUrl");

                    b.Property<string>("Message");

                    b.Property<bool>("Read");

                    b.Property<Guid>("ReceiverId");

                    b.Property<Guid>("SenderId");

                    b.Property<DateTime>("SentAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("ChatRoomId");

                    b.HasIndex("SenderId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("Backend.Domain.Entities.ChatRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RoomName");

                    b.HasKey("Id");

                    b.ToTable("ChatRooms");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Connection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ApplicationUserId");

                    b.Property<bool>("Connected");

                    b.Property<string>("UserAgent");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Connections");
                });

            modelBuilder.Entity("Backend.Domain.Entities.UserChatRoom", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("ChatRoomId");

                    b.HasKey("UserId", "ChatRoomId");

                    b.HasIndex("ChatRoomId");

                    b.ToTable("UserChatRoom");
                });

            modelBuilder.Entity("Backend.Domain.Entities.UserSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Theme")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("Light");

                    b.HasKey("Id");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("Backend.Domain.Entities.ApplicationUser", b =>
                {
                    b.HasOne("Backend.Domain.Entities.ApplicationUser", "Parent")
                        .WithMany("Athletes")
                        .HasForeignKey("ParentId");

                    b.HasOne("Backend.Domain.Entities.UserSettings", "UserSettings")
                        .WithMany()
                        .HasForeignKey("UserSettingsId");
                });

            modelBuilder.Entity("Backend.Domain.Entities.ChatMessage", b =>
                {
                    b.HasOne("Backend.Domain.Entities.ChatRoom", "ChatRoom")
                        .WithMany()
                        .HasForeignKey("ChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Backend.Domain.Entities.ApplicationUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Backend.Domain.Entities.Connection", b =>
                {
                    b.HasOne("Backend.Domain.Entities.ApplicationUser")
                        .WithMany("Connections")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("Backend.Domain.Entities.UserChatRoom", b =>
                {
                    b.HasOne("Backend.Domain.Entities.ChatRoom", "ChatRoom")
                        .WithMany("Users")
                        .HasForeignKey("ChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Backend.Domain.Entities.ApplicationUser", "User")
                        .WithMany("ChatRooms")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
